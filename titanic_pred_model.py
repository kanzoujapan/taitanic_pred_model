{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOi36tcSqO6TSYndwJK0gk3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"tIOdgAgGV0y2"},"outputs":[],"source":["import pandas as pd\n","from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.model_selection import cross_val_score\n","\n","train_df = pd.read_csv('train.csv')\n","test_df = pd.read_csv('test.csv')\n","\n","\n","def extract_title(df):\n","    df[\"Title\"] = df[\"Name\"].apply(lambda x: x.split(\",\")[1].split(\".\")[0].strip())\n","    df[\"Title\"] = df[\"Title\"].replace(\"Dona\", \"Lady\")\n","    return df\n","\n","train_df = extract_title(train_df)\n","test_df = extract_title(test_df)\n","\n","\n","title_survival = train_df.groupby(\"Title\")[\"Perished\"].agg([\"count\", \"sum\"])\n","title_survival[\"PerishedRate\"] = title_survival[\"sum\"] / title_survival[\"count\"]\n","title_perished_rate_map = title_survival[\"PerishedRate\"].to_dict()\n","\n","\n","def add_title_perished_rate(df):\n","    df[\"TitlePerishedRate\"] = df[\"Title\"].map(title_perished_rate_map)\n","    return df\n","\n","train_df = add_title_perished_rate(train_df)\n","test_df = add_title_perished_rate(test_df)\n","\n","\n","def add_cabin_null(df):\n","    df[\"cabin_null\"] = df[\"Cabin\"].notnull().astype(int)\n","    df.drop(columns=[\"Cabin\"], inplace=True)\n","    return df\n","\n","train_df = add_cabin_null(train_df)\n","test_df = add_cabin_null(test_df)\n","\n","\n","train_df.drop(columns=[\"Embarked\"], inplace=True)\n","test_df.drop(columns=[\"Embarked\"], inplace=True)\n","\n","\n","title_age_means = train_df.groupby(\"Title\")[\"Age\"].mean().to_dict()\n","train_df[\"Age\"] = train_df.apply(lambda row: title_age_means[row[\"Title\"]] if pd.isnull(row[\"Age\"]) else row[\"Age\"], axis=1)\n","test_df[\"Age\"] = test_df.apply(lambda row: title_age_means.get(row[\"Title\"], train_df[\"Age\"].mean()) if pd.isnull(row[\"Age\"]) else row[\"Age\"], axis=1)\n","\n","\n","train_df[\"Family\"] = train_df[\"SibSp\"] + train_df[\"Parch\"]\n","test_df[\"Family\"] = test_df[\"SibSp\"] + test_df[\"Parch\"]\n","\n","\n","train_df[\"Sex\"] = train_df[\"Sex\"].map({\"male\": 1, \"female\": 0})\n","test_df[\"Sex\"] = test_df[\"Sex\"].map({\"male\": 1, \"female\": 0})\n","\n","\n","columns_to_drop = [\"SibSp\", \"Parch\", \"Embarked\", \"Ticket\", \"Name\"]\n","train_df.drop(columns=columns_to_drop, inplace=True, errors='ignore')\n","test_df.drop(columns=columns_to_drop, inplace=True, errors='ignore')\n","\n","features = [\"Pclass\", \"Age\", \"Family\", \"cabin_null\", \"TitlePerishedRate\", \"Sex\"]\n","X_train = train_df[features]\n","y_train = train_df[\"Perished\"]\n","X_test = test_df[features]\n","\n","\n","X_train.fillna(0, inplace=True)\n","X_test.fillna(0, inplace=True)\n","\n","\n","log_model = LogisticRegression(max_iter=1000, random_state=42)\n","rf_model = RandomForestClassifier(max_depth=7, min_samples_leaf=1, n_estimators=100, n_jobs=-1, random_state=42)\n","mlp_model = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500, random_state=42)\n","\n","voting_model = VotingClassifier(estimators=[('log', log_model), ('rf', rf_model), ('mlp', mlp_model)],voting='soft')\n","\n","\n","voting_model.fit(X_train, y_train)\n","y_pred = voting_model.predict(X_test)"]}]}